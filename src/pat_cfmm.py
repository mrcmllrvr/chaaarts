# -*- coding: utf-8 -*-
"""Pat - CfMM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SepZhGDzh-deU1KazfFbQxjmfsKuooyt
"""

import dash_dangerously_set_inner_html

import dash
from dash import html, dcc, Input, Output
from dash.dependencies import Input, Output
import pickle
import plotly.graph_objs as go
import pandas as pd
from collections import Counter
import itertools
import ast
from google.colab import drive
import plotly.express as px
import pandas as pd

import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import numpy as np
from dash import dash_table, html

"""# Data Prep"""

dir = './CfMM-chart/'  # Update to use relative path

# Load df_test.pkl
with open(dir + 'df_test.pkl', 'rb') as pickle_file:
    df_test = pickle.load(pickle_file)

# Load df_train_with_preds.pkl
with open(dir + 'df_train_with_preds.pkl', 'rb') as pickle_file:
    df_train = pickle.load(pickle_file)

# Convert to string type for categorical filtering
df_train['publisher'] = df_train['publisher'].astype(str)
df_train['quarter_published'] = df_train['quarter_published'].astype(str)
df_train['topics'] = df_train['predicted_topics'].apply(lambda x: '|'.join(x))

df_train['topics'].value_counts()

# Convert to string type for categorical filtering
df_test['publisher'] = df_test['publisher'].astype(str)
df_test['topic'] = df_test['topic'].astype(str)
df_test['quarter_published'] = df_test['quarter_published'].astype(str)

df_test['topic'].value_counts()

# Get list of unique topics
unique_topics = df_train['predicted_topics'].apply(pd.Series).stack().reset_index(drop = True).unique()

"""# Indiv Charts

## Chart 1
"""

# df_test['tmp'] = '[' + df_test['title'] + ']' + '(' + df_test['article_url'] + ')'
# filtered_df = df_test.copy()
# filtered_df['color'] = np.select(
#             [
#                 filtered_df['bias_rating_granular'] == 2,
#                 filtered_df['bias_rating_granular'] == 1
#             ],
#             [
#                 'white',
#                 '#2E2C2B'
#             ],
#             '#2E2C2B'
#         )
# filtered_df['tmp'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + "';>" + filtered_df['title'] + "</a>"

# categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
# for category in categories:
#   filtered_df[category] = np.where(filtered_df[category]==1, category, np.nan)
# filtered_df['bias_category_label'] = filtered_df[categories].apply(lambda x: ', '.join(x.dropna().values), axis=1)

# filtered_df[categories+['bias_category_label']]

# Initialize the Dash application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the application
app.layout = html.Div(children=[
    # All elements for Chart 1
    html.Div([
        dcc.Dropdown(
            id='chart1-quarter-dropdown',
            options=[{'label': quarter, 'value': quarter} for quarter in sorted(df_test['quarter_published'].unique(), reverse=True)],
            placeholder='Select Quarter',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart1-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart1-topic-dropdown',
            options=[{'label': topic, 'value': topic} for topic in unique_topics],
            placeholder='Select Topic',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '20px'
                }
        ),
        # Toggle for color by bias ratings or bias categories
        dcc.RadioItems(
            id='chart1-color-toggle',
            options=[
                {'label': '    Show all articles', 'value': 'bias_ratings'},
                {'label': '    Show biased/very biased articles only', 'value': 'bias_categories'}
            ],
            value='bias_ratings',  # default value on load
            labelStyle={'display': 'inline-block'},
            inputStyle={"margin-left": "10px"},
            style = {'margin-bottom': '50px'}
        ),
        # Graph for displaying the top offending publishers
        dcc.Graph(id='offending-publishers-bar-chart', style = {'margin-bottom': '50px'}),

        # Table for displaying the top offending publishers
        html.Div(id='table1-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button1', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table1')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),
])

# Callback for Chart 1
@app.callback(
    Output('offending-publishers-bar-chart', 'figure'),
    [
        Input('chart1-quarter-dropdown', 'value'),
        Input('chart1-publisher-dropdown', 'value'),
        Input('chart1-topic-dropdown', 'value'),
        Input('chart1-color-toggle', 'value')
    ]
)

def update_chart1(selected_quarters, selected_publishers, selected_topics, color_by):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

    # Apply filters for quarters, publishers, and topics
    if selected_quarters:
        filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_topics:
        filtered_df = filtered_df[filtered_df['topic'].isin(selected_topics)]

    # Calculate the total counts of very biased and biased articles for each publisher
    publisher_totals = filtered_df[(filtered_df['bias_rating_granular'] == 1) |
                                   (filtered_df['bias_rating_granular'] == 2)].groupby('publisher', observed=True).size()

    # Sort publishers by this count and get the top 10
    top_publishers = publisher_totals.sort_values(ascending=False).head(10).index[::-1]

    # Filter the dataframe to include only the top publishers
    filtered_df = filtered_df[filtered_df['publisher'].isin(top_publishers)]
    filtered_df['publisher'] = pd.Categorical(filtered_df['publisher'], ordered=True, categories=top_publishers)
    filtered_df = filtered_df.sort_values('publisher')

    if color_by == 'bias_ratings':
        # Color mapping for bias ratings
        color_map = {
            0: ('#CAC6C2', 'Not Biased'),
            1: ('#eb8483', 'Biased'),
            2: ('#C22625', 'Very Biased')
        }
        # Prepare legend tracking
        legend_added = set()
        data = []
        for publisher in filtered_df['publisher'].unique():
            total_biased_articles = filtered_df[filtered_df['publisher'] == publisher]['bias_rating'].count()

            for rating, (color, name) in color_map.items():
                articles = filtered_df[(filtered_df['publisher'] == publisher) &
                                       (filtered_df['bias_rating_granular'] == rating)]['bias_rating'].count()

                percentage_of_total = (articles / total_biased_articles) * 100 if total_biased_articles > 0 else 0

                tooltip_text = (
                    f"<b>Publisher: </b>{publisher}<br>"
                    f"<b>Bias Rating:</b> {name}<br>"
                    f"<b>Number of Articles:</b> {articles}<br>"
                    f"<b>Percentage of Total:</b> {percentage_of_total:.2f}%"
                )

                showlegend = name not in legend_added
                legend_added.add(name)

                data.append(go.Bar(
                    x=[articles],
                    y=[publisher],
                    name=name,
                    orientation='h',
                    marker=dict(color=color),
                    showlegend=showlegend,
                    text=tooltip_text,
                    hoverinfo='text',
                    textposition='none'
                ))

    else:
        categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
        category_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']  # example colors
        # Prepare legend tracking
        legend_added = set()
        data = []
        filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
        filtered_df['total_bias_category'] = filtered_df[categories].sum(axis=1)

        for publisher in filtered_df['publisher'].unique():
            # Summing the 'total_bias_category' column which was pre-calculated
            total_biased_articles = filtered_df[filtered_df['publisher'] == publisher].shape[0]

            for i, category in enumerate(categories):
                # Count the number of rows where the category column has a 1 for this publisher
                articles = filtered_df[(filtered_df['publisher'] == publisher) & (filtered_df[category] == 1)].shape[0]

                # Calculate the percentage of total articles for the current category
                # percentage_of_total = (articles / total_biased_articles * 100) if total_biased_articles > 0 else 0

                tooltip_text = (
                    f"<b>Publisher: </b>{publisher}<br>"
                    f"<b>Bias Category: </b>{category.replace('_', ' ').title().replace('Or', 'or')}<br>"
                    f"Of the {total_biased_articles} articles with biased/very biased ratings,<br><b>{articles}</b> of them committed <b>{category.replace('_', ' ').title().replace('Or', 'or')}</b>."
                    # f"<b>Percentage of Total: </b>{percentage_of_total:.2f}%"
                )

                showlegend = category not in legend_added  # determine showlegend based on current category
                legend_added.add(category)

                data.append(go.Bar(
                    x=[articles],
                    y=[publisher],
                    name=category.replace('_', ' ').title().replace('Or', 'or'),
                    orientation='h',
                    marker=dict(color=category_colors[i]),
                    showlegend=showlegend,
                    text=tooltip_text,
                    hoverinfo='text',
                    textposition='none'
                ))

    # Now sort the bars so that they match the order of top_publishers
    # data = sorted(data, key=lambda x: top_publishers.get_loc(x['y'][0]))

    # Update the layout
    layout = go.Layout(
        title=f"""<b>Who are the top offending publishers year to date?</b>""",
        xaxis=dict(title='Number of Articles'),
        yaxis=dict(title='Publisher'),
        hovermode='closest',
        barmode='stack',
        showlegend=True,
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': data, 'layout': layout}


# Callback for Table Title 1
@app.callback(
    [
      Output('table1-title', 'children'),
      Output('clear-button1', 'style')
    ],
    [
        Input('chart1-color-toggle', 'value'),
        Input('offending-publishers-bar-chart', 'clickData'),
        Input('clear-button1', 'n_clicks')
    ]
)

def update_table_title(color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'offending-publishers-bar-chart':
        if clickData is not None:
            publisher = str(clickData['points'][0]['label'])

            if color_by == 'bias_ratings':
                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles from <b>{publisher}</b>')
            else:
                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing biased/bery biased articles from <b>{publisher}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 1
@app.callback(
      Output(component_id='table1', component_property='children'),
    [
        Input('chart1-quarter-dropdown', 'value'),
        Input('chart1-publisher-dropdown', 'value'),
        Input('chart1-topic-dropdown', 'value'),
        Input('chart1-color-toggle', 'value'),
        Input('offending-publishers-bar-chart', 'clickData'),
        Input('clear-button1', 'n_clicks')
    ]
)

def update_table(selected_quarters, selected_publishers, selected_topics, color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button1':
        return None

    elif id == 'offending-publishers-bar-chart':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_quarters:
            filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_topics:
            filtered_df = filtered_df[filtered_df['topic'].isin(selected_topics)]

        if clickData is not None:
            publisher = str(clickData['points'][0]['label'])
            filtered_df = filtered_df[filtered_df['publisher']==publisher]

            if color_by == 'bias_ratings':
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title()} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"'
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"'
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            else:
                filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
                for category in categories:
                    filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')
                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']+categories].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{generalisation}="Y"',
                                'column_id': 'generalisation'
                                },
                            'backgroundColor': '#4185A0',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{prominence}="Y"',
                                'column_id': 'prominence'
                                },
                            'backgroundColor': '#AA4D71',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{negative_behaviour}="Y"',
                                'column_id': 'negative_behaviour'
                                },
                            'backgroundColor': '#B85C3B',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{misrepresentation}="Y"',
                                'column_id': 'misrepresentation'
                                },
                            'backgroundColor': '#C5BE71',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{headline_or_imagery}="Y"',
                                'column_id': 'headline_or_imagery'
                                },
                            'backgroundColor': '#7658A0',
                            'color': 'white'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            return table

if __name__ == '__main__':
    app.run_server(debug=True)

"""## Chart 2"""

# Initialize the Dash application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the application
app.layout = html.Div(children=[
    # All elements for Chart 2
    html.Div([
        dcc.Dropdown(
            id='chart2-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-bias-rating-dropdown',
            options=[
                {'label': 'Biased', 'value': 2},
                {'label': 'Very Biased', 'value': 1},
                {'label': 'Not Biased', 'value': 0},
            ],
            placeholder='Select Bias Rating',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-bias-category-dropdown',
            options=[
                {'label': 'Generalisation', 'value': 'generalisation'},
                {'label': 'Prominence', 'value': 'prominence'},
                {'label': 'Negative Behaviour', 'value': 'negative_behaviour'},
                {'label': 'Misrepresentation', 'value': 'misrepresentation'},
                {'label': 'Headline or Imagery', 'value': 'headline_or_imagery'},
            ],
            placeholder='Select Bias Category',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-quarter-dropdown',
            options=[{'label': quarter, 'value': quarter} for quarter in sorted(df_test['quarter_published'].unique())],
            placeholder='Select Quarter',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '50px'
                }
        ),
        # Graph for displaying the top topics
        dcc.Graph(id='top-topics-bar-chart'),

        # Table for displaying the top offending publishers
        html.Div(id='table2-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button2', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table2')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),
])

# Callback for Chart 2
@app.callback(
    Output('top-topics-bar-chart', 'figure'),
    [
        Input('chart2-publisher-dropdown', 'value'),
        Input('chart2-bias-rating-dropdown', 'value'),
        Input('chart2-bias-category-dropdown', 'value'),
        Input('chart2-quarter-dropdown', 'value'),
    ]
)

def update_chart2(selected_publishers, selected_bias_ratings, selected_bias_categories, selected_quarters):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0, 1, 2])]

    # Apply filters for quarters, publishers, and topics
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_bias_ratings:
        filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
    if selected_bias_categories:
        filtered_df = filtered_df[filtered_df[selected_bias_categories].sum(axis=1) > 0]
    if selected_quarters:
        filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]

    # Aggregate topics
    topic_counts = filtered_df.groupby('topic', observed=True).size().sort_values(ascending=False)
    total_articles = topic_counts.sum()

    # Predefine colors for the top 5 topics
    top_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']
    # Add gray color for the remaining topics
    gray_color = '#CAC6C2'

    # Create bars for the bar chart
    data = []
    for i, (topic, count) in enumerate(topic_counts.items()):
        tooltip_text = (
            f"<b>Topic: </b>{topic}<br>"
            f"<b>Number of Articles: </b>{count}<br>"
            f"<b>Percentage of Total: </b>{count/total_articles:.2%}"
        )

        bar = go.Bar(
            y=[topic],
            x=[count],
            orientation='h',
            marker=dict(color=top_colors[i] if i < 5 else gray_color),
            text=tooltip_text,
            hoverinfo='text',
            textposition='none'
        )
        data.append(bar)

    # Update the layout
    layout = go.Layout(
        title='<b>What are the most popular topics year to date?</b>',
        xaxis=dict(title='Number of Articles'),
        yaxis=dict(title='Topics', autorange='reversed', tickmode='array', tickvals=list(range(len(topic_counts))), ticktext=topic_counts.index.tolist()),
        hovermode='closest',
        barmode='stack',
        showlegend=False,
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': data, 'layout': layout}


# Callback for Table Title 2
@app.callback(
    [
        Output('table2-title', 'children'),
        Output('clear-button2', 'style')
    ],
    [
        Input('top-topics-bar-chart', 'clickData'),
        Input('clear-button2', 'n_clicks')
    ]
)

def update_table2_title(clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'top-topics-bar-chart':
        if clickData is not None:
            topic = str(clickData['points'][0]['label'])

            string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles about <b>{topic}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 2
@app.callback(
      Output(component_id='table2', component_property='children'),
    [
        Input('chart2-publisher-dropdown', 'value'),
        Input('chart2-bias-rating-dropdown', 'value'),
        Input('chart2-bias-category-dropdown', 'value'),
        Input('chart2-quarter-dropdown', 'value'),
        Input('top-topics-bar-chart', 'clickData'),
        Input('clear-button2', 'n_clicks')
    ]
)


def update_table2(selected_publishers, selected_bias_ratings, selected_bias_categories, selected_quarters, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button2':
        return None

    elif id == 'top-topics-bar-chart':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_quarters:
            filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_bias_ratings:
            filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
        if selected_bias_categories:
            filtered_df = filtered_df[filtered_df['bias_category'].isin(selected_bias_ratings)]

        if clickData is not None:
            topic = str(clickData['points'][0]['label'])
            filtered_df = filtered_df[filtered_df['topic']==topic]

            filtered_df['color'] = np.select(
                [
                    filtered_df['bias_rating_granular'] == 2,
                    filtered_df['bias_rating_granular'] == 1
                ],
                [
                    'white',
                    '#2E2C2B'
                ],
                '#2E2C2B'
            )
            filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
            filtered_df['bias_rating_label'] = np.select(
                [
                    filtered_df['bias_rating_granular']==-1,
                    filtered_df['bias_rating_granular']==0,
                    filtered_df['bias_rating_granular']==1,
                    filtered_df['bias_rating_granular']==2
                ],
                [
                    'Not Sure',
                    'Not Biased',
                    'Biased',
                    'Very Biased'
                ]
            )
            categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
            for category in categories:
                filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')
            filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

            table = dash_table.DataTable(
                css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                markdown_options={"html": True},
                data=filtered_df.to_dict('records'),
                sort_action='native',
                filter_action='native',
                style_data_conditional=[
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Very Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#C22625',
                        'color': 'white'
                    },
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#eb8483',
                        'color': '#2E2C2B'
                    }
                ],
                style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
            )

            return table

if __name__ == '__main__':
    app.run_server(debug=True)

"""## Chart 3"""

# Initialize the Dash application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the application
app.layout = html.Div(children=[
    # All elements for Chart 3
    html.Div([
        dcc.Dropdown(
            id='chart3-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '20px'
                }
        ),
        # Toggle for color by bias ratings or bias categories
        dcc.RadioItems(
            id='chart3-toggle',
            options=[
                {'label': '    Show all articles', 'value': 'bias_ratings'},
                {'label': '    Show biased/very biased articles only', 'value': 'bias_categories'}
            ],
            value='bias_ratings',  # default value on load
            labelStyle={'display': 'inline-block'},
            inputStyle={"margin-left": "10px"},
            style = {'margin-bottom': '50px'}
        ),

        # Graph for displaying the top topics
        dcc.Graph(id='chart3-bias-category-trend-graph'),

        # Table for displaying the top offending publishers
        html.Div(id='table3-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button3', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table3')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),
])

# Callback for Chart 3
@app.callback(
    Output('chart3-bias-category-trend-graph', 'figure'),
    [Input('chart3-publisher-dropdown', 'value'),
     Input('chart3-toggle', 'value')]
)
def update_chart3(selected_publishers, color_by):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0, 1, 2])]

    # Filter the dataframe based on the selected publishers
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]

    # Sort and order 'quarter_published'
    quarter_order = sorted(df_test['quarter_published'].unique(), key=lambda x: (int(x[:4]), int(x[-1])))
    quarters_ordered = pd.Categorical(filtered_df['quarter_published'], categories=quarter_order, ordered=True)
    filtered_df['quarter_published'] = quarters_ordered
    filtered_df.sort_values('quarter_published', inplace=True)

    # Now, generate dynamic traces based on the filtered dataframe
    traces = []
    if color_by == 'bias_categories':
        filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
        bias_categories = [
                        'generalisation',
                        'prominence',
                        'negative_behaviour',
                        'misrepresentation',
                        'headline_or_imagery'
                          ]
        color_map = dict(zip(bias_categories, ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']))

        for category in bias_categories:
            category_counts = filtered_df.groupby('quarter_published', observed=True)[category].sum().reindex(quarter_order, fill_value=0)
            # Calculate the change since last quarter
            changes = category_counts.diff().fillna(0).astype(int)

            tooltip_text = [
                f"<b>Quarter: </b>{index}<br>"
                f"<b>Bias Category: </b>{category.title().replace('_', ' ').replace('Or', 'or')}<br>"
                f"<b>Count of Articles: </b>{value}<br>"
                f"<b>Change Since Last Quarter: </b>" +
                ("+" if change > 0 else "-" if change < 0 else "No change") +
                (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
                for index, value, change in zip(category_counts.index, category_counts.values, changes)
            ]

            traces.append(go.Scatter(
                x=category_counts.index,
                y=category_counts.values,
                mode='lines+markers',
                name=category.title().replace('_', ' ').replace('Or', 'or'),
                text=tooltip_text,
                hoverinfo='text',
                marker=dict(color=color_map[category], size=10),
                line=dict(color=color_map[category], width=3)
            ))

        title_str = 'What is the nature of the bias being committed over time?'

    elif color_by == 'bias_ratings':
        bias_ratings = {
            0: 'Not Biased',
            1: 'Biased',
            2: 'Very Biased'
        }
        color_map = dict(zip(['Not Biased', 'Biased', 'Very Biased'], ['#CAC6C2', '#eb8483', '#C22625']))
        for rating, label in bias_ratings.items():
            rating_counts = filtered_df[filtered_df['bias_rating_granular'] == rating].groupby('quarter_published', observed=True).size().reindex(quarter_order, fill_value=0)
            # Calculate the change since last quarter
            changes = rating_counts.diff().fillna(0).astype(int)

            tooltip_text = [
                f"<b>Quarter: </b>{index}<br>"
                f"<b>Bias Rating: </b>{label}<br>"
                f"<b>Count of Articles: </b>{value}<br>"
                f"<b>Change Since Last Quarter: </b>" +
                ("+" if change > 0 else "-" if change < 0 else "No change") +
                (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
                for index, value, change in zip(rating_counts.index, rating_counts.values, changes)
            ]
            traces.append(go.Scatter(
                x=rating_counts.index,
                y=rating_counts.values,
                mode='lines+markers',
                name=label,
                text=tooltip_text,
                hoverinfo='text',
                marker=dict(color=color_map[label], size=10),
                line=dict(color=color_map[label], width=3)
            ))

            title_str = 'How many articles commit bias over time?'

    # Define the layout for the graph
    layout = go.Layout(
        title='<b>'+title_str+'</b>',
        xaxis=dict(
            title='Quarter',
            type='category',
            tickmode='array',
            tickvals=quarter_order,
            ticktext=[q.replace('Q', ' Q') for q in quarter_order]  # Display quarter with a space, e.g., '2019 Q1'
        ),
        yaxis=dict(title='Count'),
        hovermode='closest',
        legend=dict(
            orientation='h',
            yanchor='top',
            y=-0.3,
            xanchor='center',
            x=0.5
        ),
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': traces, 'layout': layout}


# Callback for Table Title 3
@app.callback(
    [
        Output('table3-title', 'children'),
        Output('clear-button3', 'style')
    ],
    [
        Input('chart3-toggle', 'value'),
        Input('chart3-bias-category-trend-graph', 'clickData'),
        Input('clear-button3', 'n_clicks'),
    ]
)

def update_table3_title(color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'chart3-bias-category-trend-graph':
        if clickData is not None:
            if color_by == 'bias_ratings':
                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_rating_text = [s for s in tooltip_list if s.lower().startswith('bias rating')][0]
                bias_rating = bias_rating_text.split(': ')[1]

                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing <b>{bias_rating}</b> articles published in <b>{quarter_published}</b>')
                return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

            elif color_by == 'bias_categories':
                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_category_text = [s for s in tooltip_list if s.lower().startswith('bias category')][0]
                bias_category = bias_category_text.split(': ')[1]

                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing <b>{bias_category}</b> articles published in <b>{quarter_published}</b>')
                return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}


# Callback for Table 3
@app.callback(
      Output(component_id='table3', component_property='children'),
    [
        Input('chart3-publisher-dropdown', 'value'),
        Input('chart3-toggle', 'value'),
        Input('chart3-bias-category-trend-graph', 'clickData'),
        Input('clear-button3', 'n_clicks')
    ]
)

def update_table3(selected_publishers, color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button3':
        return None

    elif id == 'chart3-bias-category-trend-graph':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for publishers
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]

        if clickData is not None:
            if color_by == 'bias_ratings':
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"

                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_rating_text = [s for s in tooltip_list if s.lower().startswith('bias rating')][0]
                bias_rating = bias_rating_text.split(': ')[1]
                filtered_df = filtered_df[(filtered_df['bias_rating_label']==bias_rating) & (filtered_df['quarter_published']==quarter_published)]

                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title()} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"'
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"'
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            else:
                filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
                for category in categories:
                    filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')

                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_category_text = [s for s in tooltip_list if s.lower().startswith('bias category')][0]
                bias_category = bias_category_text.split(': ')[1]
                filtered_df = filtered_df[(filtered_df[bias_category.lower().replace(' ', '_').replace('Or', 'or')]=='Y') & (filtered_df['quarter_published']==quarter_published)]

                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']+categories].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{generalisation}="Y"',
                                'column_id': 'generalisation'
                                },
                            'backgroundColor': '#4185A0',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{prominence}="Y"',
                                'column_id': 'prominence'
                                },
                            'backgroundColor': '#AA4D71',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{negative_behaviour}="Y"',
                                'column_id': 'negative_behaviour'
                                },
                            'backgroundColor': '#B85C3B',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{misrepresentation}="Y"',
                                'column_id': 'misrepresentation'
                                },
                            'backgroundColor': '#C5BE71',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{headline_or_imagery}="Y"',
                                'column_id': 'headline_or_imagery'
                                },
                            'backgroundColor': '#7658A0',
                            'color': 'white'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            return table

if __name__ == '__main__':
    app.run_server(debug=True)

"""## Chart 4"""

# Initialize the Dash application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the application
app.layout = html.Div(children=[
    # All elements for Chart 4
    html.Div([
        dcc.Dropdown(
            id='chart4-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart4-bias-rating-dropdown',
            options=[
                {'label': 'Biased', 'value': 2},
                {'label': 'Very Biased', 'value': 1},
                {'label': 'Not Biased', 'value': 0},
            ],
            placeholder='Select Bias Rating',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart4-bias-category-dropdown',
            options=[
                {'label': 'Generalisation', 'value': 'generalisation'},
                {'label': 'Prominence', 'value': 'prominence'},
                {'label': 'Negative Behaviour', 'value': 'negative_behaviour'},
                {'label': 'Misrepresentation', 'value': 'misrepresentation'},
                {'label': 'Headline or Imagery', 'value': 'headline_or_imagery'},
            ],
            placeholder='Select Bias Category',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '50px'
                }
        ),
        # Graph for displaying the top topics
        dcc.Graph(id='topic-trend-graph'),

        # Table for displaying the top offending publishers
        html.Div(id='table4-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button4', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table4')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),
])


@app.callback(
    Output('topic-trend-graph', 'figure'),
    [
        Input('chart4-publisher-dropdown', 'value'),
        Input('chart4-bias-category-dropdown', 'value'),
        Input('chart4-bias-rating-dropdown', 'value')
    ]
)

def update_chart4(selected_publishers, selected_bias_categories, selected_bias_ratings):
    # Apply filters based on selections
    filtered_df = df_test.copy()
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_bias_ratings:
        filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
    if selected_bias_categories:
        filtered_df = filtered_df[filtered_df[selected_bias_categories].sum(axis=1) > 0]

    # Sort 'quarter_published' and convert to categorical with ordered categories
    quarter_order = sorted(df_test['quarter_published'].unique(), key=lambda x: (int(x[:4]), int(x[-1])))
    quarters_ordered = pd.Categorical(filtered_df['quarter_published'], categories=quarter_order, ordered=True)
    filtered_df['quarter_published'] = quarters_ordered
    filtered_df.sort_values('quarter_published', inplace=True)

    # Determine top topics based on some criteria
    topic_counts = filtered_df.groupby('topic', observed=True).size()
    top_4_topics = topic_counts.nlargest(4).index.tolist()

    # Assign colors to top topics and default color for others
    top_4_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71']  # Example colors for the top 4 topics
    default_color = '#CAC6C2'  # Gray color for other topics
    color_mapping = {topic: top_4_colors[i] if topic in top_4_topics else default_color for i, topic in enumerate(top_4_topics)}

    traces = []
    for topic in filtered_df['topic'].unique():
        topic_df = filtered_df[filtered_df['topic'] == topic]
        topic_agg = topic_df.groupby('quarter_published', observed=True).size().reindex(quarter_order, fill_value=0)
        changes = topic_agg.diff().fillna(0).astype(int)
        tooltip_text = [
            f"<b>Quarter: </b>{index}<br>"
            f"<b>Topic: </b>{topic}<br>"
            f"<b>Count of Articles: </b>{value}<br>"
            f"<b>Change Since Last Quarter: </b>" +
            ("+" if change > 0 else "-" if change < 0 else "No change") +
            (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
            for index, value, change in zip(topic_agg.index, topic_agg.values, changes)
        ]

        traces.append(go.Scatter(
            x=topic_agg.index,
            y=topic_agg.values,
            mode='lines+markers',
            name=topic,
            text=tooltip_text,
            hoverinfo='text',
            marker=dict(color=color_mapping.get(topic, default_color), size=10),
            line=dict(color=color_mapping.get(topic, default_color), width=3)
        ))

    layout = go.Layout(
        title='<b>What are the popular topics over time?</b>',
        xaxis=dict(
            title='Quarter',
            type='category',
            tickmode='array',
            tickvals=quarter_order,
            ticktext=[q.replace('Q', ' Q') for q in quarter_order]
        ),
        yaxis=dict(title='Article Count'),
        hovermode='closest',
        legend=dict(
            orientation='h',
            yanchor='top',
            y=-0.3,
            xanchor='center',
            x=0.5
        ),
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': traces, 'layout': layout}

# Callback for Table Title 4
@app.callback(
    [
        Output('table4-title', 'children'),
        Output('clear-button4', 'style')
    ],
    [
        Input('topic-trend-graph', 'clickData'),
        Input('clear-button4', 'n_clicks')
    ]
)

def update_table4_title(clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'topic-trend-graph':
        if clickData is not None:
            tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
            tooltip_list = tooltip.split('<br>')
            topic_text = [s for s in tooltip_list if s.lower().startswith('topic')][0]
            topic = topic_text.split(': ')[1]
            quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
            quarter = quarter_text.split(': ')[1]

            string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles about <b>{topic}</b> published in <b>{quarter}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 4
@app.callback(
      Output(component_id='table4', component_property='children'),
    [
        Input('chart4-publisher-dropdown', 'value'),
        Input('chart4-bias-rating-dropdown', 'value'),
        Input('chart4-bias-category-dropdown', 'value'),
        Input('topic-trend-graph', 'clickData'),
        Input('clear-button4', 'n_clicks')
    ]
)

def update_table4(selected_publishers, selected_bias_ratings, selected_bias_categories, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button4':
        return None

    elif id == 'topic-trend-graph':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_bias_ratings:
            filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
        if selected_bias_categories:
            filtered_df = filtered_df[filtered_df['bias_category'].isin(selected_bias_ratings)]

        if clickData is not None:
            filtered_df['color'] = np.select(
                [
                    filtered_df['bias_rating_granular'] == 2,
                    filtered_df['bias_rating_granular'] == 1
                ],
                [
                    'white',
                    '#2E2C2B'
                ],
                '#2E2C2B'
            )
            filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
            filtered_df['bias_rating_label'] = np.select(
                [
                    filtered_df['bias_rating_granular']==-1,
                    filtered_df['bias_rating_granular']==0,
                    filtered_df['bias_rating_granular']==1,
                    filtered_df['bias_rating_granular']==2
                ],
                [
                    'Not Sure',
                    'Not Biased',
                    'Biased',
                    'Very Biased'
                ]
            )
            categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
            for category in categories:
                filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')

            tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
            tooltip_list = tooltip.split('<br>')
            quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
            quarter_published = quarter_text.split(': ')[1]
            topic_text = [s for s in tooltip_list if s.lower().startswith('topic')][0]
            topic = topic_text.split(': ')[1]
            filtered_df = filtered_df[(filtered_df['topic']==topic) & (filtered_df['quarter_published']==quarter_published)]

            filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

            table = dash_table.DataTable(
                css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                markdown_options={"html": True},
                data=filtered_df.to_dict('records'),
                sort_action='native',
                filter_action='native',
                style_data_conditional=[
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Very Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#C22625',
                        'color': 'white'
                    },
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#eb8483',
                        'color': '#2E2C2B'
                    }
                ],
                style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
            )

            return table


if __name__ == '__main__':
    app.run_server(mode='inline', debug=True)

"""## Chart 5"""

# Copy paste heatmap code here

"""# All Charts"""

# Initialize the Dash application
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the application
app.layout = html.Div(children=[
    # All elements for Chart 1
    html.Div([
        dcc.Dropdown(
            id='chart1-quarter-dropdown',
            options=[{'label': quarter, 'value': quarter} for quarter in sorted(df_test['quarter_published'].unique(), reverse=True)],
            placeholder='Select Quarter',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart1-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart1-topic-dropdown',
            options=[{'label': topic, 'value': topic} for topic in unique_topics],
            placeholder='Select Topic',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '20px'
                }
        ),
        # Toggle for color by bias ratings or bias categories
        dcc.RadioItems(
            id='chart1-color-toggle',
            options=[
                {'label': '    Show all articles', 'value': 'bias_ratings'},
                {'label': '    Show biased/very biased articles only', 'value': 'bias_categories'}
            ],
            value='bias_ratings',  # default value on load
            labelStyle={'display': 'inline-block'},
            inputStyle={"margin-left": "10px"},
            style = {'margin-bottom': '50px'}
        ),
        # Graph for displaying the top offending publishers
        dcc.Graph(id='offending-publishers-bar-chart', style = {'margin-bottom': '50px'}),

        # Table for displaying the top offending publishers
        html.Div(id='table1-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button1', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table1')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),

    # All elements for Chart 2
    html.Div([
        dcc.Dropdown(
            id='chart2-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-bias-rating-dropdown',
            options=[
                {'label': 'Biased', 'value': 2},
                {'label': 'Very Biased', 'value': 1},
                {'label': 'Not Biased', 'value': 0},
            ],
            placeholder='Select Bias Rating',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-bias-category-dropdown',
            options=[
                {'label': 'Generalisation', 'value': 'generalisation'},
                {'label': 'Prominence', 'value': 'prominence'},
                {'label': 'Negative Behaviour', 'value': 'negative_behaviour'},
                {'label': 'Misrepresentation', 'value': 'misrepresentation'},
                {'label': 'Headline or Imagery', 'value': 'headline_or_imagery'},
            ],
            placeholder='Select Bias Category',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart2-quarter-dropdown',
            options=[{'label': quarter, 'value': quarter} for quarter in sorted(df_test['quarter_published'].unique())],
            placeholder='Select Quarter',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '50px'
                }
        ),
        # Graph for displaying the top topics
        dcc.Graph(id='top-topics-bar-chart'),

        # Table for displaying the top offending publishers
        html.Div(id='table2-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button2', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table2')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),

    # All elements for Chart 3
    html.Div([
        dcc.Dropdown(
            id='chart3-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '20px'
                }
        ),
        # Toggle for color by bias ratings or bias categories
        dcc.RadioItems(
            id='chart3-toggle',
            options=[
                {'label': '    Show all articles', 'value': 'bias_ratings'},
                {'label': '    Show biased/very biased articles only', 'value': 'bias_categories'}
            ],
            value='bias_ratings',  # default value on load
            labelStyle={'display': 'inline-block'},
            inputStyle={"margin-left": "10px"},
            style = {'margin-bottom': '50px'}
        ),

        # Graph for displaying the top topics
        dcc.Graph(id='chart3-bias-category-trend-graph'),

        # Table for displaying the top offending publishers
        html.Div(id='table3-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button3', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table3')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),

    # All elements for Chart 4
    html.Div([
        dcc.Dropdown(
            id='chart4-publisher-dropdown',
            options=[{'label': publisher, 'value': publisher} for publisher in sorted(df_test['publisher'].unique())],
            placeholder='Select Publisher',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart4-bias-rating-dropdown',
            options=[
                {'label': 'Biased', 'value': 2},
                {'label': 'Very Biased', 'value': 1},
                {'label': 'Not Biased', 'value': 0},
            ],
            placeholder='Select Bias Rating',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '10px'
                }
        ),
        dcc.Dropdown(
            id='chart4-bias-category-dropdown',
            options=[
                {'label': 'Generalisation', 'value': 'generalisation'},
                {'label': 'Prominence', 'value': 'prominence'},
                {'label': 'Negative Behaviour', 'value': 'negative_behaviour'},
                {'label': 'Misrepresentation', 'value': 'misrepresentation'},
                {'label': 'Headline or Imagery', 'value': 'headline_or_imagery'},
            ],
            placeholder='Select Bias Category',
            multi=True,
            clearable=True,
            style = {
                'width': '70%',
                'margin-bottom': '50px'
                }
        ),
        # Graph for displaying the top topics
        dcc.Graph(id='topic-trend-graph'),

        # Table for displaying the top offending publishers
        html.Div(id='table4-title', style={'fontSize': 20, 'fontColor': '#2E2C2B'}),
        html.Button('Clear Table', id='clear-button4', n_clicks=0, style = {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}),
        html.Div(id='table4')
    ],
        style={
            'padding':10,
            'flex':1,
            'margin-top': '50px',
            'margin-bottom': '100px',
            'font-family': 'sans-serif'
            }
    ),
])

# =============================================== CHART 1 =============================================== #

# Callback for Chart 1
@app.callback(
    Output('offending-publishers-bar-chart', 'figure'),
    [
        Input('chart1-quarter-dropdown', 'value'),
        Input('chart1-publisher-dropdown', 'value'),
        Input('chart1-topic-dropdown', 'value'),
        Input('chart1-color-toggle', 'value')
    ]
)

def update_chart1(selected_quarters, selected_publishers, selected_topics, color_by):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

    # Apply filters for quarters, publishers, and topics
    if selected_quarters:
        filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_topics:
        filtered_df = filtered_df[filtered_df['topic'].isin(selected_topics)]

    # Calculate the total counts of very biased and biased articles for each publisher
    publisher_totals = filtered_df[(filtered_df['bias_rating_granular'] == 1) |
                                   (filtered_df['bias_rating_granular'] == 2)].groupby('publisher', observed=True).size()

    # Sort publishers by this count and get the top 10
    top_publishers = publisher_totals.sort_values(ascending=False).head(10).index[::-1]

    # Filter the dataframe to include only the top publishers
    filtered_df = filtered_df[filtered_df['publisher'].isin(top_publishers)]
    filtered_df['publisher'] = pd.Categorical(filtered_df['publisher'], ordered=True, categories=top_publishers)
    filtered_df = filtered_df.sort_values('publisher')

    if color_by == 'bias_ratings':
        # Color mapping for bias ratings
        color_map = {
            0: ('#CAC6C2', 'Not Biased'),
            1: ('#eb8483', 'Biased'),
            2: ('#C22625', 'Very Biased')
        }
        # Prepare legend tracking
        legend_added = set()
        data = []
        for publisher in filtered_df['publisher'].unique():
            total_biased_articles = filtered_df[filtered_df['publisher'] == publisher]['bias_rating'].count()

            for rating, (color, name) in color_map.items():
                articles = filtered_df[(filtered_df['publisher'] == publisher) &
                                       (filtered_df['bias_rating_granular'] == rating)]['bias_rating'].count()

                percentage_of_total = (articles / total_biased_articles) * 100 if total_biased_articles > 0 else 0

                tooltip_text = (
                    f"<b>Publisher: </b>{publisher}<br>"
                    f"<b>Bias Rating:</b> {name}<br>"
                    f"<b>Number of Articles:</b> {articles}<br>"
                    f"<b>Percentage of Total:</b> {percentage_of_total:.2f}%"
                )

                showlegend = name not in legend_added
                legend_added.add(name)

                data.append(go.Bar(
                    x=[articles],
                    y=[publisher],
                    name=name,
                    orientation='h',
                    marker=dict(color=color),
                    showlegend=showlegend,
                    text=tooltip_text,
                    hoverinfo='text',
                    textposition='none'
                ))

    else:
        categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
        category_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']  # example colors
        # Prepare legend tracking
        legend_added = set()
        data = []
        filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
        filtered_df['total_bias_category'] = filtered_df[categories].sum(axis=1)

        for publisher in filtered_df['publisher'].unique():
            # Summing the 'total_bias_category' column which was pre-calculated
            total_biased_articles = filtered_df[filtered_df['publisher'] == publisher].shape[0]

            for i, category in enumerate(categories):
                # Count the number of rows where the category column has a 1 for this publisher
                articles = filtered_df[(filtered_df['publisher'] == publisher) & (filtered_df[category] == 1)].shape[0]

                # Calculate the percentage of total articles for the current category
                # percentage_of_total = (articles / total_biased_articles * 100) if total_biased_articles > 0 else 0

                tooltip_text = (
                    f"<b>Publisher: </b>{publisher}<br>"
                    f"<b>Bias Category: </b>{category.replace('_', ' ').title().replace('Or', 'or')}<br>"
                    f"Of the {total_biased_articles} articles with biased/very biased ratings,<br><b>{articles}</b> of them committed <b>{category.replace('_', ' ').title().replace('Or', 'or')}</b>."
                    # f"<b>Percentage of Total: </b>{percentage_of_total:.2f}%"
                )

                showlegend = category not in legend_added  # determine showlegend based on current category
                legend_added.add(category)

                data.append(go.Bar(
                    x=[articles],
                    y=[publisher],
                    name=category.replace('_', ' ').title().replace('Or', 'or'),
                    orientation='h',
                    marker=dict(color=category_colors[i]),
                    showlegend=showlegend,
                    text=tooltip_text,
                    hoverinfo='text',
                    textposition='none'
                ))

    # Now sort the bars so that they match the order of top_publishers
    # data = sorted(data, key=lambda x: top_publishers.get_loc(x['y'][0]))

    # Update the layout
    layout = go.Layout(
        title=f"""<b>Who are the top offending publishers year to date?</b>""",
        xaxis=dict(title='Number of Articles'),
        yaxis=dict(title='Publisher'),
        hovermode='closest',
        barmode='stack',
        showlegend=True,
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': data, 'layout': layout}


# Callback for Table Title 1
@app.callback(
    [
      Output('table1-title', 'children'),
      Output('clear-button1', 'style')
    ],
    [
        Input('chart1-color-toggle', 'value'),
        Input('offending-publishers-bar-chart', 'clickData'),
        Input('clear-button1', 'n_clicks')
    ]
)

def update_table1_title(color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'offending-publishers-bar-chart':
        if clickData is not None:
            publisher = str(clickData['points'][0]['label'])

            if color_by == 'bias_ratings':
                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles from <b>{publisher}</b>')
            else:
                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing biased/bery biased articles from <b>{publisher}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 1
@app.callback(
      Output(component_id='table1', component_property='children'),
    [
        Input('chart1-quarter-dropdown', 'value'),
        Input('chart1-publisher-dropdown', 'value'),
        Input('chart1-topic-dropdown', 'value'),
        Input('chart1-color-toggle', 'value'),
        Input('offending-publishers-bar-chart', 'clickData'),
        Input('clear-button1', 'n_clicks')
    ]
)

def update_table1(selected_quarters, selected_publishers, selected_topics, color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button1':
        return None

    elif id == 'offending-publishers-bar-chart':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_quarters:
            filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_topics:
            filtered_df = filtered_df[filtered_df['topic'].isin(selected_topics)]

        if clickData is not None:
            publisher = str(clickData['points'][0]['label'])
            filtered_df = filtered_df[filtered_df['publisher']==publisher]

            if color_by == 'bias_ratings':
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title()} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"'
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"'
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            else:
                filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
                for category in categories:
                    filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')
                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']+categories].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{generalisation}="Y"',
                                'column_id': 'generalisation'
                                },
                            'backgroundColor': '#4185A0',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{prominence}="Y"',
                                'column_id': 'prominence'
                                },
                            'backgroundColor': '#AA4D71',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{negative_behaviour}="Y"',
                                'column_id': 'negative_behaviour'
                                },
                            'backgroundColor': '#B85C3B',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{misrepresentation}="Y"',
                                'column_id': 'misrepresentation'
                                },
                            'backgroundColor': '#C5BE71',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{headline_or_imagery}="Y"',
                                'column_id': 'headline_or_imagery'
                                },
                            'backgroundColor': '#7658A0',
                            'color': 'white'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            return table

# =============================================== CHART 2 =============================================== #

# Callback for Chart 2
@app.callback(
    Output('top-topics-bar-chart', 'figure'),
    [
        Input('chart2-publisher-dropdown', 'value'),
        Input('chart2-bias-rating-dropdown', 'value'),
        Input('chart2-bias-category-dropdown', 'value'),
        Input('chart2-quarter-dropdown', 'value'),
    ]
)

def update_chart2(selected_publishers, selected_bias_ratings, selected_bias_categories, selected_quarters):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0, 1, 2])]

    # Apply filters for quarters, publishers, and topics
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_bias_ratings:
        filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
    if selected_bias_categories:
        filtered_df = filtered_df[filtered_df[selected_bias_categories].sum(axis=1) > 0]
    if selected_quarters:
        filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]

    # Aggregate topics
    topic_counts = filtered_df.groupby('topic', observed=True).size().sort_values(ascending=False)
    total_articles = topic_counts.sum()

    # Predefine colors for the top 5 topics
    top_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']
    # Add gray color for the remaining topics
    gray_color = '#CAC6C2'

    # Create bars for the bar chart
    data = []
    for i, (topic, count) in enumerate(topic_counts.items()):
        tooltip_text = (
            f"<b>Topic: </b>{topic}<br>"
            f"<b>Number of Articles: </b>{count}<br>"
            f"<b>Percentage of Total: </b>{count/total_articles:.2%}"
        )

        bar = go.Bar(
            y=[topic],
            x=[count],
            orientation='h',
            marker=dict(color=top_colors[i] if i < 5 else gray_color),
            text=tooltip_text,
            hoverinfo='text',
            textposition='none'
        )
        data.append(bar)

    # Update the layout
    layout = go.Layout(
        title='<b>What are the most popular topics year to date?</b>',
        xaxis=dict(title='Number of Articles'),
        yaxis=dict(title='Topics', autorange='reversed', tickmode='array', tickvals=list(range(len(topic_counts))), ticktext=topic_counts.index.tolist()),
        hovermode='closest',
        barmode='stack',
        showlegend=False,
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': data, 'layout': layout}


# Callback for Table Title 2
@app.callback(
    [
        Output('table2-title', 'children'),
        Output('clear-button2', 'style')
    ],
    [
        Input('top-topics-bar-chart', 'clickData'),
        Input('clear-button2', 'n_clicks')
    ]
)

def update_table2_title(clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'top-topics-bar-chart':
        if clickData is not None:
            topic = str(clickData['points'][0]['label'])

            string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles about <b>{topic}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 2
@app.callback(
      Output(component_id='table2', component_property='children'),
    [
        Input('chart2-publisher-dropdown', 'value'),
        Input('chart2-bias-rating-dropdown', 'value'),
        Input('chart2-bias-category-dropdown', 'value'),
        Input('chart2-quarter-dropdown', 'value'),
        Input('top-topics-bar-chart', 'clickData'),
        Input('clear-button2', 'n_clicks')
    ]
)


def update_table2(selected_publishers, selected_bias_ratings, selected_bias_categories, selected_quarters, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button2':
        return None

    elif id == 'top-topics-bar-chart':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_quarters:
            filtered_df = filtered_df[filtered_df['quarter_published'].isin(selected_quarters)]
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_bias_ratings:
            filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
        if selected_bias_categories:
            filtered_df = filtered_df[filtered_df['bias_category'].isin(selected_bias_ratings)]

        if clickData is not None:
            topic = str(clickData['points'][0]['label'])
            filtered_df = filtered_df[filtered_df['topic']==topic]

            filtered_df['color'] = np.select(
                [
                    filtered_df['bias_rating_granular'] == 2,
                    filtered_df['bias_rating_granular'] == 1
                ],
                [
                    'white',
                    '#2E2C2B'
                ],
                '#2E2C2B'
            )
            filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
            filtered_df['bias_rating_label'] = np.select(
                [
                    filtered_df['bias_rating_granular']==-1,
                    filtered_df['bias_rating_granular']==0,
                    filtered_df['bias_rating_granular']==1,
                    filtered_df['bias_rating_granular']==2
                ],
                [
                    'Not Sure',
                    'Not Biased',
                    'Biased',
                    'Very Biased'
                ]
            )
            categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
            for category in categories:
                filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')
            filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

            table = dash_table.DataTable(
                css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                markdown_options={"html": True},
                data=filtered_df.to_dict('records'),
                sort_action='native',
                filter_action='native',
                style_data_conditional=[
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Very Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#C22625',
                        'color': 'white'
                    },
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#eb8483',
                        'color': '#2E2C2B'
                    }
                ],
                style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
            )

            return table

# =============================================== CHART 3 =============================================== #

# Callback for Chart 3
@app.callback(
    Output('chart3-bias-category-trend-graph', 'figure'),
    [Input('chart3-publisher-dropdown', 'value'),
     Input('chart3-toggle', 'value')]
)
def update_chart3(selected_publishers, color_by):
    filtered_df = df_test.copy()
    filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0, 1, 2])]

    # Filter the dataframe based on the selected publishers
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]

    # Sort and order 'quarter_published'
    quarter_order = sorted(df_test['quarter_published'].unique(), key=lambda x: (int(x[:4]), int(x[-1])))
    quarters_ordered = pd.Categorical(filtered_df['quarter_published'], categories=quarter_order, ordered=True)
    filtered_df['quarter_published'] = quarters_ordered
    filtered_df.sort_values('quarter_published', inplace=True)

    # Now, generate dynamic traces based on the filtered dataframe
    traces = []
    if color_by == 'bias_categories':
        filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
        bias_categories = [
                        'generalisation',
                        'prominence',
                        'negative_behaviour',
                        'misrepresentation',
                        'headline_or_imagery'
                          ]
        color_map = dict(zip(bias_categories, ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71', '#7658A0']))

        for category in bias_categories:
            category_counts = filtered_df.groupby('quarter_published', observed=True)[category].sum().reindex(quarter_order, fill_value=0)
            # Calculate the change since last quarter
            changes = category_counts.diff().fillna(0).astype(int)

            tooltip_text = [
                f"<b>Quarter: </b>{index}<br>"
                f"<b>Bias Category: </b>{category.title().replace('_', ' ').replace('Or', 'or')}<br>"
                f"<b>Count of Articles: </b>{value}<br>"
                f"<b>Change Since Last Quarter: </b>" +
                ("+" if change > 0 else "-" if change < 0 else "No change") +
                (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
                for index, value, change in zip(category_counts.index, category_counts.values, changes)
            ]

            traces.append(go.Scatter(
                x=category_counts.index,
                y=category_counts.values,
                mode='lines+markers',
                name=category.title().replace('_', ' ').replace('Or', 'or'),
                text=tooltip_text,
                hoverinfo='text',
                marker=dict(color=color_map[category], size=10),
                line=dict(color=color_map[category], width=3)
            ))

        title_str = 'What is the nature of the bias being committed over time?'

    elif color_by == 'bias_ratings':
        bias_ratings = {
            0: 'Not Biased',
            1: 'Biased',
            2: 'Very Biased'
        }
        color_map = dict(zip(['Not Biased', 'Biased', 'Very Biased'], ['#CAC6C2', '#eb8483', '#C22625']))
        for rating, label in bias_ratings.items():
            rating_counts = filtered_df[filtered_df['bias_rating_granular'] == rating].groupby('quarter_published', observed=True).size().reindex(quarter_order, fill_value=0)
            # Calculate the change since last quarter
            changes = rating_counts.diff().fillna(0).astype(int)

            tooltip_text = [
                f"<b>Quarter: </b>{index}<br>"
                f"<b>Bias Rating: </b>{label}<br>"
                f"<b>Count of Articles: </b>{value}<br>"
                f"<b>Change Since Last Quarter: </b>" +
                ("+" if change > 0 else "-" if change < 0 else "No change") +
                (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
                for index, value, change in zip(rating_counts.index, rating_counts.values, changes)
            ]
            traces.append(go.Scatter(
                x=rating_counts.index,
                y=rating_counts.values,
                mode='lines+markers',
                name=label,
                text=tooltip_text,
                hoverinfo='text',
                marker=dict(color=color_map[label], size=10),
                line=dict(color=color_map[label], width=3)
            ))

            title_str = 'How many articles commit bias over time?'

    # Define the layout for the graph
    layout = go.Layout(
        title='<b>'+title_str+'</b>',
        xaxis=dict(
            title='Quarter',
            type='category',
            tickmode='array',
            tickvals=quarter_order,
            ticktext=[q.replace('Q', ' Q') for q in quarter_order]  # Display quarter with a space, e.g., '2019 Q1'
        ),
        yaxis=dict(title='Count'),
        hovermode='closest',
        legend=dict(
            orientation='h',
            yanchor='top',
            y=-0.3,
            xanchor='center',
            x=0.5
        ),
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': traces, 'layout': layout}


# Callback for Table Title 3
@app.callback(
    [
        Output('table3-title', 'children'),
        Output('clear-button3', 'style')
    ],
    [
        Input('chart3-toggle', 'value'),
        Input('chart3-bias-category-trend-graph', 'clickData'),
        Input('clear-button3', 'n_clicks'),
    ]
)

def update_table3_title(color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'chart3-bias-category-trend-graph':
        if clickData is not None:
            if color_by == 'bias_ratings':
                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_rating_text = [s for s in tooltip_list if s.lower().startswith('bias rating')][0]
                bias_rating = bias_rating_text.split(': ')[1]

                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing <b>{bias_rating}</b> articles published in <b>{quarter_published}</b>')
                return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

            elif color_by == 'bias_categories':
                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_category_text = [s for s in tooltip_list if s.lower().startswith('bias category')][0]
                bias_category = bias_category_text.split(': ')[1]

                string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing <b>{bias_category}</b> articles published in <b>{quarter_published}</b>')
                return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 3
@app.callback(
      Output(component_id='table3', component_property='children'),
    [
        Input('chart3-publisher-dropdown', 'value'),
        Input('chart3-toggle', 'value'),
        Input('chart3-bias-category-trend-graph', 'clickData'),
        Input('clear-button3', 'n_clicks')
    ]
)

def update_table3(selected_publishers, color_by, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button3':
        return None

    elif id == 'chart3-bias-category-trend-graph':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for publishers
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]

        if clickData is not None:
            if color_by == 'bias_ratings':
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"

                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_rating_text = [s for s in tooltip_list if s.lower().startswith('bias rating')][0]
                bias_rating = bias_rating_text.split(': ')[1]
                filtered_df = filtered_df[(filtered_df['bias_rating_label']==bias_rating) & (filtered_df['quarter_published']==quarter_published)]

                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title()} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"'
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"'
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            else:
                filtered_df = filtered_df[filtered_df['bias_rating_granular']>=1]
                filtered_df['color'] = np.select(
                    [
                        filtered_df['bias_rating_granular'] == 2,
                        filtered_df['bias_rating_granular'] == 1
                    ],
                    [
                        'white',
                        '#2E2C2B'
                    ],
                    '#2E2C2B'
                )
                filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
                filtered_df['bias_rating_label'] = np.select(
                    [
                        filtered_df['bias_rating_granular']==-1,
                        filtered_df['bias_rating_granular']==0,
                        filtered_df['bias_rating_granular']==1,
                        filtered_df['bias_rating_granular']==2
                    ],
                    [
                        'Not Sure',
                        'Not Biased',
                        'Biased',
                        'Very Biased'
                    ]
                )
                categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
                for category in categories:
                    filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')

                tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
                tooltip_list = tooltip.split('<br>')
                quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
                quarter_published = quarter_text.split(': ')[1]
                bias_category_text = [s for s in tooltip_list if s.lower().startswith('bias category')][0]
                bias_category = bias_category_text.split(': ')[1]
                filtered_df = filtered_df[(filtered_df[bias_category.lower().replace(' ', '_').replace('Or', 'or')]=='Y') & (filtered_df['quarter_published']==quarter_published)]

                filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']+categories].sort_values('date_published', ascending=False)

                table = dash_table.DataTable(
                    css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                    columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                    markdown_options={"html": True},
                    data=filtered_df.to_dict('records'),
                    sort_action='native',
                    filter_action='native',
                    style_data_conditional=[
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Very Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#C22625',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{bias_rating_label}="Biased"',
                                'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                                },
                            'backgroundColor': '#eb8483',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{generalisation}="Y"',
                                'column_id': 'generalisation'
                                },
                            'backgroundColor': '#4185A0',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{prominence}="Y"',
                                'column_id': 'prominence'
                                },
                            'backgroundColor': '#AA4D71',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{negative_behaviour}="Y"',
                                'column_id': 'negative_behaviour'
                                },
                            'backgroundColor': '#B85C3B',
                            'color': 'white'
                        },
                        {
                            'if': {
                                'filter_query': '{misrepresentation}="Y"',
                                'column_id': 'misrepresentation'
                                },
                            'backgroundColor': '#C5BE71',
                            'color': '#2E2C2B'
                        },
                        {
                            'if': {
                                'filter_query': '{headline_or_imagery}="Y"',
                                'column_id': 'headline_or_imagery'
                                },
                            'backgroundColor': '#7658A0',
                            'color': 'white'
                        }
                    ],
                    style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                    style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
                )

            return table


# =============================================== CHART 4 =============================================== #


@app.callback(
    Output('topic-trend-graph', 'figure'),
    [
        Input('chart4-publisher-dropdown', 'value'),
        Input('chart4-bias-category-dropdown', 'value'),
        Input('chart4-bias-rating-dropdown', 'value')
    ]
)

def update_chart4(selected_publishers, selected_bias_categories, selected_bias_ratings):
    # Apply filters based on selections
    filtered_df = df_test.copy()
    if selected_publishers:
        filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
    if selected_bias_ratings:
        filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
    if selected_bias_categories:
        filtered_df = filtered_df[filtered_df[selected_bias_categories].sum(axis=1) > 0]

    # Sort 'quarter_published' and convert to categorical with ordered categories
    quarter_order = sorted(df_test['quarter_published'].unique(), key=lambda x: (int(x[:4]), int(x[-1])))
    quarters_ordered = pd.Categorical(filtered_df['quarter_published'], categories=quarter_order, ordered=True)
    filtered_df['quarter_published'] = quarters_ordered
    filtered_df.sort_values('quarter_published', inplace=True)

    # Determine top topics based on some criteria
    topic_counts = filtered_df.groupby('topic', observed=True).size()
    top_4_topics = topic_counts.nlargest(4).index.tolist()

    # Assign colors to top topics and default color for others
    top_4_colors = ['#4185A0', '#AA4D71', '#B85C3B', '#C5BE71']  # Example colors for the top 4 topics
    default_color = '#CAC6C2'  # Gray color for other topics
    color_mapping = {topic: top_4_colors[i] if topic in top_4_topics else default_color for i, topic in enumerate(top_4_topics)}

    traces = []
    for topic in filtered_df['topic'].unique():
        topic_df = filtered_df[filtered_df['topic'] == topic]
        topic_agg = topic_df.groupby('quarter_published', observed=True).size().reindex(quarter_order, fill_value=0)
        changes = topic_agg.diff().fillna(0).astype(int)
        tooltip_text = [
            f"<b>Quarter: </b>{index}<br>"
            f"<b>Topic: </b>{topic}<br>"
            f"<b>Count of Articles: </b>{value}<br>"
            f"<b>Change Since Last Quarter: </b>" +
            ("+" if change > 0 else "-" if change < 0 else "No change") +
            (" " + str(abs(change)) + " " + ("article" if abs(change) == 1 else "articles") if change != 0 else "")
            for index, value, change in zip(topic_agg.index, topic_agg.values, changes)
        ]

        traces.append(go.Scatter(
            x=topic_agg.index,
            y=topic_agg.values,
            mode='lines+markers',
            name=topic,
            text=tooltip_text,
            hoverinfo='text',
            marker=dict(color=color_mapping.get(topic, default_color), size=10),
            line=dict(color=color_mapping.get(topic, default_color), width=3)
        ))

    layout = go.Layout(
        title='<b>What are the popular topics over time?</b>',
        xaxis=dict(
            title='Quarter',
            type='category',
            tickmode='array',
            tickvals=quarter_order,
            ticktext=[q.replace('Q', ' Q') for q in quarter_order]
        ),
        yaxis=dict(title='Article Count'),
        hovermode='closest',
        legend=dict(
            orientation='h',
            yanchor='top',
            y=-0.3,
            xanchor='center',
            x=0.5
        ),
        hoverlabel=dict(
            align='left'
        ),

        template="simple_white",
        plot_bgcolor='white',
        paper_bgcolor='white',
        font_color='#2E2C2B',
        font_size=14,
        margin={'l': 150, 'r': 20, 'b': 40, 't': 40}
    )

    return {'data': traces, 'layout': layout}

# Callback for Table Title 4
@app.callback(
    [
        Output('table4-title', 'children'),
        Output('clear-button4', 'style')
    ],
    [
        Input('topic-trend-graph', 'clickData'),
        Input('clear-button4', 'n_clicks')
    ]
)

def update_table4_title(clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'topic-trend-graph':
        if clickData is not None:
            tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
            tooltip_list = tooltip.split('<br>')
            topic_text = [s for s in tooltip_list if s.lower().startswith('topic')][0]
            topic = topic_text.split(': ')[1]
            quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
            quarter = quarter_text.split(': ')[1]

            string = dash_dangerously_set_inner_html.DangerouslySetInnerHTML(f'Showing all articles about <b>{topic}</b> published in <b>{quarter}</b>')

            return [string], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'block'}

    else:
        return [], {'fontSize':14, 'margin-bottom': '10px', 'margin-top': '10px', 'display': 'none'}

# Callback for Table 4
@app.callback(
      Output(component_id='table4', component_property='children'),
    [
        Input('chart4-publisher-dropdown', 'value'),
        Input('chart4-bias-rating-dropdown', 'value'),
        Input('chart4-bias-category-dropdown', 'value'),
        Input('topic-trend-graph', 'clickData'),
        Input('clear-button4', 'n_clicks')
    ]
)

def update_table4(selected_publishers, selected_bias_ratings, selected_bias_categories, clickData, n_clicks):
    id = dash.callback_context.triggered[0]['prop_id'].split('.')[0]

    if id == 'clear-button4':
        return None

    elif id == 'topic-trend-graph':
        filtered_df = df_test.copy()
        filtered_df = filtered_df[filtered_df['bias_rating_granular'].isin([0,1,2])]

        # Apply filters for quarters, publishers, and topics
        if selected_publishers:
            filtered_df = filtered_df[filtered_df['publisher'].isin(selected_publishers)]
        if selected_bias_ratings:
            filtered_df = filtered_df[filtered_df['bias_rating'].isin(selected_bias_ratings)]
        if selected_bias_categories:
            filtered_df = filtered_df[filtered_df['bias_category'].isin(selected_bias_ratings)]

        if clickData is not None:
            filtered_df['color'] = np.select(
                [
                    filtered_df['bias_rating_granular'] == 2,
                    filtered_df['bias_rating_granular'] == 1
                ],
                [
                    'white',
                    '#2E2C2B'
                ],
                '#2E2C2B'
            )
            filtered_df['title'] = "<a href='" + filtered_df['article_url'] + "' target='_blank' style='color:" + filtered_df['color'] + ";'>" + filtered_df['title'] + "</a>"
            filtered_df['bias_rating_label'] = np.select(
                [
                    filtered_df['bias_rating_granular']==-1,
                    filtered_df['bias_rating_granular']==0,
                    filtered_df['bias_rating_granular']==1,
                    filtered_df['bias_rating_granular']==2
                ],
                [
                    'Not Sure',
                    'Not Biased',
                    'Biased',
                    'Very Biased'
                ]
            )
            categories = ['generalisation', 'prominence', 'negative_behaviour', 'misrepresentation', 'headline_or_imagery']
            for category in categories:
                filtered_df[category] = np.where(filtered_df[category]==1, 'Y', 'N')

            tooltip = str(clickData['points'][0]['text']).replace('<b>', '').replace('</b>', '')
            tooltip_list = tooltip.split('<br>')
            quarter_text = [s for s in tooltip_list if s.lower().startswith('quarter')][0]
            quarter_published = quarter_text.split(': ')[1]
            topic_text = [s for s in tooltip_list if s.lower().startswith('topic')][0]
            topic = topic_text.split(': ')[1]
            filtered_df = filtered_df[(filtered_df['topic']==topic) & (filtered_df['quarter_published']==quarter_published)]

            filtered_df = filtered_df[['title', 'date_published', 'topic', 'bias_rating_label']].sort_values('date_published', ascending=False)

            table = dash_table.DataTable(
                css=[dict(selector= "p", rule = "margin: 0; text-align: left")],
                columns=[{'id': x, 'name': x.replace('_', ' ').title(), 'presentation': 'markdown'} if x == 'title' else {'id': x, 'name': x.replace('_', ' ').replace('label', '').title().replace('Or', 'or')} for x in filtered_df.columns],
                markdown_options={"html": True},
                data=filtered_df.to_dict('records'),
                sort_action='native',
                filter_action='native',
                style_data_conditional=[
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Very Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#C22625',
                        'color': 'white'
                    },
                    {
                        'if': {
                            'filter_query': '{bias_rating_label}="Biased"',
                            'column_id': ['date_published', 'title', 'topic', 'bias_rating_label']
                            },
                        'backgroundColor': '#eb8483',
                        'color': '#2E2C2B'
                    }
                ],
                style_header={'textAlign': 'center', 'fontWeight': 'bold'},
                style_cell={'textAlign': 'left', 'padding': '5px', 'font-family':'sans-serif'}
            )

            return table


# =============================================== CHART 5 =============================================== #


if __name__ == '__main__':
    app.run_server(mode='inline', debug=True)